/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/prov/qualified-attribution": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Qualified Attribute
         * @description Links a node to a prov:Attribution instance using the prov:qualifiedAttribution predicate.
         *
         *     Available to users with:
         *     - urn:telicent:update:catalog_write
         *     - urn:telicent:update:writer
         *     - urn:telicent:update:objectproperty
         *     - urn:telicent:update:superuser
         */
        post: operations["add_qualified_attribute_prov_qualified_attribution_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/prov/qualified-attribution/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete Qualified Attribute
         * @description Removes prov:qualifiedAttribution link between a node and a prov:Attribution instance
         *
         *     Available to users with:
         *     - urn:telicent:update:catalog_delete
         *     - urn:telicent:update:superuser
         */
        post: operations["delete_qualified_attribute_prov_qualified_attribution_delete_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/prov/qualified-attribution/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update Qualified Attribute
         * @description Updates a prov:qualifiedAttribution link between a node and a prov:Attribution instance
         */
        post: operations["update_qualified_attribute_prov_qualified_attribution_update_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dcterms/title": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Title
         * @description Adds a dcterms:title to a node
         *
         *     Available to users with:
         *     - urn:telicent:update:catalog_write
         *     - urn:telicent:update:writer
         *     - urn:telicent:update:annotate
         *     - urn:telicent:update:superuser
         */
        post: operations["add_title_dcterms_title_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dcterms/title/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete Title
         * @description Removes a dcterms:title from a node
         *
         *     Available to users with:
         *     - urn:telicent:update:catalog_delete
         *     - urn:telicent:update:superuser
         */
        post: operations["delete_title_dcterms_title_delete_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dcterms/title/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update Title
         * @description Updates a dcterms:title on a node
         */
        post: operations["update_title_dcterms_title_update_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dcterms/description": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Description
         * @description Adds a dcterms:description to a node
         *
         *     Available to users with:
         *     - urn:telicent:update:catalog_write
         *     - urn:telicent:update:writer
         *     - urn:telicent:update:annotate
         *     - urn:telicent:update:superuser
         */
        post: operations["add_description_dcterms_description_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dcterms/description/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete Description
         * @description Removes a dcterms:description from a node
         *
         *     Available to users with:
         *     - urn:telicent:update:catalog_delete
         *     - urn:telicent:update:superuser
         */
        post: operations["delete_description_dcterms_description_delete_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dcterms/description/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update Description
         * @description Updates a dcterms:description on a node
         */
        post: operations["update_description_dcterms_description_update_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dcterms/identifier": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Identifier
         * @description Adds a dcterms:identifier to a node
         *
         *     Available to users with:
         *     - urn:telicent:update:catalog_write
         *     - urn:telicent:update:writer
         *     - urn:telicent:update:annotate
         *     - urn:telicent:update:superuser
         */
        post: operations["add_identifier_dcterms_identifier_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dcterms/identifier/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete Identifier
         * @description Removes a dcterms:identifier from a node
         *
         *     Available to users with:
         *     - urn:telicent:update:catalog_delete
         *     - urn:telicent:update:superuser
         */
        post: operations["delete_identifier_dcterms_identifier_delete_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dcterms/identifier/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update Identifier
         * @description Update a dcterms:identifier from a node
         */
        post: operations["update_identifier_dcterms_identifier_update_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dcterms/modified": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Modified Date
         * @description Adds a dcterms:modified date to a node
         *
         *     Available to users with:
         *     - urn:telicent:update:catalog_write
         *     - urn:telicent:update:writer
         *     - urn:telicent:update:annotate
         *     - urn:telicent:update:superuser
         */
        post: operations["add_modified_date_dcterms_modified_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dcterms/modified/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete Modified Date
         * @description Removes a dcterms:modified date from a node
         *
         *     Available to users with:
         *     - urn:telicent:update:catalog_delete
         *     - urn:telicent:update:superuser
         */
        post: operations["delete_modified_date_dcterms_modified_delete_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dcterms/modified/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update Modified Date
         * @description Updates a dcterms:modified date on a node
         */
        post: operations["update_modified_date_dcterms_modified_update_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dcterms/issued": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Issued Date
         * @description Adds a dcterms:issued date to a node
         *
         *     Available to users with:
         *     - urn:telicent:update:catalog_write
         *     - urn:telicent:update:writer
         *     - urn:telicent:update:annotate
         *     - urn:telicent:update:superuser
         */
        post: operations["add_issued_date_dcterms_issued_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dcterms/issued/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete Issued Date
         * @description Removes a dcterms:issued date from a node
         *
         *     Available to users with:
         *     - urn:telicent:update:catalog_delete
         *     - urn:telicent:update:superuser
         */
        post: operations["delete_issued_date_dcterms_issued_delete_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dcterms/issued/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update Issued Date
         * @description Updates a dcterms:issued date on a node
         */
        post: operations["update_issued_date_dcterms_issued_update_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dcterms/rights": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Link Rights Object
         * @description Links a node to a rights object using the dcterms:rights predicate. Note the rights object must be an instance of
         *     dcterms:RightsStatement
         *
         *     Available to users with:
         *     - urn:telicent:update:catalog_write
         *     - urn:telicent:update:writer
         *     - urn:telicent:update:objectproperty
         *     - urn:telicent:update:superuser
         */
        post: operations["link_rights_object_dcterms_rights_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dcterms/rights/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unlink Rights Object
         * @description Removes dcterms:rights link between a node to a rights object.
         *
         *     Available to users with:
         *     - urn:telicent:update:catalog_delete
         *     - urn:telicent:update:superuser
         */
        post: operations["unlink_rights_object_dcterms_rights_delete_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dcterms/rights/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update Rights Object
         * @description Updates dcterms:rights link between a node to a rights object.
         */
        post: operations["update_rights_object_dcterms_rights_update_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dcterms/publisher": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Link Publisher Object
         * @description Links a node to its published dcterms:publisher predicate. Note the publisher object must be an instance of
         *     and Organisation
         *
         *     Available to users with:
         *     - urn:telicent:update:catalog_write
         *     - urn:telicent:update:writer
         *     - urn:telicent:update:objectproperty
         *     - urn:telicent:update:superuser
         */
        post: operations["link_publisher_object_dcterms_publisher_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dcterms/publisher/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unlink Publisher Object
         * @description Removes dcterms:publisher link between a node to an Organisation object.
         *
         *     Available to users with:
         *     - urn:telicent:update:catalog_delete
         *     - urn:telicent:update:superuser
         */
        post: operations["unlink_publisher_object_dcterms_publisher_delete_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dcterms/publisher/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update Publisher Object
         * @description Updates dcterms:publisher link between a node to an Organisation object.
         */
        post: operations["update_publisher_object_dcterms_publisher_update_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dcat/contact-point": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Contact Point
         * @description Links a catalog item to a contact point (e.g., a person or organization responsible for the catalog item).
         *     The contact point should be an Organization or Person object.
         *
         *     Available to users with:
         *     - urn:telicent:update:catalog_write
         *     - urn:telicent:update:writer
         *     - urn:telicent:update:objectproperty
         *     - urn:telicent:update:superuser
         */
        post: operations["add_contact_point_dcat_contact_point_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dcat/contact-point/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete Contact Point
         * @description Deletes the link between a catalog item and a contact point.
         *
         *     Available to users with:
         *     - urn:telicent:update:catalog_delete
         *     - urn:telicent:update:superuser
         */
        post: operations["delete_contact_point_dcat_contact_point_delete_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dcat/contact-point/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update Contact Point
         * @description update the link between a catalog item and a contact point.
         */
        post: operations["update_contact_point_dcat_contact_point_update_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dcat/media-type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Media Type
         * @description Links a catalog item to a media type (e.g., application/json, text/html).
         *
         *     The media type object should be a dcterms:MediaType
         *
         *     Available to users with:
         *     - urn:telicent:update:catalog_write
         *     - urn:telicent:update:writer
         *     - urn:telicent:update:objectproperty
         *     - urn:telicent:update:superuser
         */
        post: operations["add_media_type_dcat_media_type_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dcat/media-type/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete Media Type
         * @description Deletes the link between a catalog item and a media type.
         *
         *     Available to users with:
         *     - urn:telicent:update:catalog_delete
         *     - urn:telicent:update:superuser
         */
        post: operations["delete_media_type_dcat_media_type_delete_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dcat/media-type/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update Media Type
         * @description Deletes the link between a catalog item and a media type.
         */
        post: operations["update_media_type_dcat_media_type_update_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/document-link": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Link Document
         * @description Creates a link from a node to a document that describes it.
         *
         *     Available to users with:
         *     - urn:telicent:update:annotate
         *     - urn:telicent:update:writer
         *     - urn:telicent:update:superuser
         */
        post: operations["link_document_document_link_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/document-link/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unlink Document
         * @description Deletes a link between a node and its describing document
         *
         *     Available to users with:
         *     - urn:telicent:update:superuser
         */
        post: operations["unlink_document_document_link_delete_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/telicent/primary-name": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Telicent Primary Name
         * @description Adds a telicent:primaryName to a node - note that there must only be one primary name per node.
         *
         *     Available to users with:
         *     - urn:telicent:update:superuser
         */
        post: operations["add_telicent_primary_name_telicent_primary_name_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/telicent/primary-name/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete Telicent Primary Name
         * @description Deletes a telicent:primaryName from a node
         *
         *     Available to users with:
         *     - urn:telicent:update:superuser
         */
        post: operations["delete_telicent_primary_name_telicent_primary_name_delete_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ontology/rdfs-class": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Rdfs Class
         * @description Adds a new rdfs:Class to the ontology
         *
         *     Available to users with:
         *     - urn:telicent:update:superuser
         *     - urn:telicent:update:ontology_write
         */
        post: operations["add_rdfs_class_ontology_rdfs_class_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/annotation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Annotation
         * @description Add a literal property to a node in the graph. The predicate must be one of the following:
         *
         *     - http://purl.org/dc/terms/title
         *     - http://purl.org/dc/terms/description
         *     - http://purl.org/dc/terms/identifier
         *     - http://www.w3.org/2000/01/rdf-schema#label
         *     - http://www.w3.org/2004/02/skos/core#prefLabel
         *     - http://www.w3.org/2004/02/skos/core#altLabel
         *
         *     Available to users with:
         *     - urn:telicent:update:annotate
         *     - urn:telicent:update:writer
         *     - urn:telicent:update:superuser
         */
        post: operations["add_annotation_annotation_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/annotation/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete Annotation
         * @description Delete a literal property from a node in the graph. As this is available only to superusers, it is not
         *     necessary to check the predicate. Be careful using this endpoint, as it will delete any literal
         *     property from a node, regardless of the predicate.
         *
         *     Available to users with:
         *     - urn:telicent:update:superuser
         */
        post: operations["delete_annotation_annotation_delete_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/object-property": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Link Node
         * @description Add an object property triple to the graph.
         *
         *     Available to users with:
         *     - urn:telicent:update:writer
         *     - urn:telicent:update:objectproperty
         *     - urn:telicent:update:superuser
         */
        post: operations["link_node_object_property_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/object-property/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unlink Node
         * @description Delete an object property triple from the graph.
         *
         *     Available to users with:
         *     - urn:telicent:update:superuser
         */
        post: operations["unlink_node_object_property_delete_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/availability": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Availability probe */
        get: operations["handle_request_availability_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/readiness": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Readiness probe */
        get: operations["handle_request_readiness_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** CheckResult */
        CheckResult: {
            /** Name */
            name: string;
            /** Passed */
            passed: boolean;
            /** Details */
            details?: string | null;
        };
        /** ContactPoint */
        ContactPoint: {
            /**
             * Item Uri
             * Format: uri
             */
            item_uri: string;
            /**
             * Rights Object Uri
             * Format: uri
             */
            rights_object_uri: string;
        };
        /** ContactPointUpdate */
        ContactPointUpdate: {
            /**
             * Item Uri
             * Format: uri
             */
            item_uri: string;
            /**
             * Old Rights Object Uri
             * Format: uri
             */
            old_rights_object_uri: string;
            /**
             * New Rights Object Uri
             * Format: uri
             */
            new_rights_object_uri: string;
        };
        /** DateTime */
        DateTime: {
            /**
             * Item Uri
             * Format: uri
             */
            item_uri: string;
            /**
             * Datetime
             * Format: date-time
             */
            datetime: string;
        };
        /** DateTimeUpdate */
        DateTimeUpdate: {
            /**
             * Item Uri
             * Format: uri
             */
            item_uri: string;
            /**
             * Old Datetime
             * Format: date-time
             */
            old_datetime: string;
            /**
             * New Datetime
             * Format: date-time
             */
            new_datetime: string;
        };
        /** Description */
        Description: {
            /**
             * Item Uri
             * Format: uri
             */
            item_uri: string;
            /** Description */
            description: string;
        };
        /** DescriptionUpdate */
        DescriptionUpdate: {
            /**
             * Item Uri
             * Format: uri
             */
            item_uri: string;
            /** Old Description */
            old_description: string;
            /** New Description */
            new_description: string;
        };
        /** DocumentLink */
        DocumentLink: {
            /**
             * Item Uri
             * Format: uri
             */
            item_uri: string;
            /**
             * Document
             * Format: uri
             */
            document: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** HealthcheckReport */
        HealthcheckReport: {
            /** Healthy */
            healthy: boolean;
            /** Checks */
            checks: components["schemas"]["CheckResult"][];
        };
        /** Identifier */
        Identifier: {
            /**
             * Item Uri
             * Format: uri
             */
            item_uri: string;
            /** Identifier */
            identifier: string;
        };
        /** IdentifierUpdate */
        IdentifierUpdate: {
            /**
             * Item Uri
             * Format: uri
             */
            item_uri: string;
            /** Old Identifier */
            old_identifier: string;
            /** New Identifier */
            new_identifier: string;
        };
        /** LiteralTripleAndDataset */
        LiteralTripleAndDataset: {
            /**
             * Item Uri
             * Format: uri
             */
            item_uri: string;
            /**
             * Subject
             * Format: uri
             */
            subject: string;
            /**
             * Predicate
             * Format: uri
             */
            predicate: string;
            /** Obj */
            obj: string;
            /** Datatype */
            datatype?: string | null;
        };
        /** MediaType */
        MediaType: {
            /**
             * Item Uri
             * Format: uri
             */
            item_uri: string;
            /**
             * Media Type Object Uri
             * Format: uri
             */
            media_type_object_uri: string;
        };
        /** MediaTypeUpdate */
        MediaTypeUpdate: {
            /**
             * Item Uri
             * Format: uri
             */
            item_uri: string;
            /**
             * Old Media Type Object Uri
             * Format: uri
             */
            old_media_type_object_uri: string;
            /**
             * New Media Type Object Uri
             * Format: uri
             */
            new_media_type_object_uri: string;
        };
        /**
         * ObjectTripleAndDataset
         * @description Combines an ObjectTriple with a dataset
         */
        ObjectTripleAndDataset: {
            /**
             * Item Uri
             * Format: uri
             */
            item_uri: string;
            /**
             * Subject
             * Format: uri
             */
            subject: string;
            /**
             * Predicate
             * Format: uri
             */
            predicate: string;
            /**
             * Obj
             * Format: uri
             */
            obj: string;
            /** Named Graph */
            named_graph?: string | null;
        };
        /** Publisher */
        Publisher: {
            /**
             * Item Uri
             * Format: uri
             */
            item_uri: string;
            /**
             * Publisher Object Uri
             * Format: uri
             */
            publisher_object_uri: string;
        };
        /** PublisherUpdate */
        PublisherUpdate: {
            /**
             * Item Uri
             * Format: uri
             */
            item_uri: string;
            /**
             * Old Publisher Object Uri
             * Format: uri
             */
            old_publisher_object_uri: string;
            /**
             * New Publisher Object Uri
             * Format: uri
             */
            new_publisher_object_uri: string;
        };
        /** QualifiedAttribute */
        QualifiedAttribute: {
            /**
             * Item Uri
             * Format: uri
             */
            item_uri: string;
            /**
             * Attribution Item Uri
             * Format: uri
             */
            attribution_item_uri: string;
        };
        /** QualifiedAttributeUpdate */
        QualifiedAttributeUpdate: {
            /**
             * Item Uri
             * Format: uri
             */
            item_uri: string;
            /**
             * Old Attribution Item Uri
             * Format: uri
             */
            old_attribution_item_uri: string;
            /**
             * New Attribution Item Uri
             * Format: uri
             */
            new_attribution_item_uri: string;
        };
        /** RDFClass */
        RDFClass: {
            /**
             * Class Uri
             * Format: uri
             */
            class_uri: string;
            /** Label */
            label: string;
            /** Description */
            description: string;
            /** Superclass */
            superclass?: string | null;
        };
        /** Rights */
        Rights: {
            /**
             * Item Uri
             * Format: uri
             */
            item_uri: string;
            /**
             * Rights Object Uri
             * Format: uri
             */
            rights_object_uri: string;
        };
        /** RightsUpdate */
        RightsUpdate: {
            /**
             * Item Uri
             * Format: uri
             */
            item_uri: string;
            /**
             * Old Rights Object Uri
             * Format: uri
             */
            old_rights_object_uri: string;
            /**
             * New Rights Object Uri
             * Format: uri
             */
            new_rights_object_uri: string;
        };
        /** TelicentPrimaryName */
        TelicentPrimaryName: {
            /**
             * Item Uri
             * Format: uri
             */
            item_uri: string;
            /** Name */
            name: string;
        };
        /** Title */
        Title: {
            /**
             * Item Uri
             * Format: uri
             */
            item_uri: string;
            /** Title */
            title: string;
        };
        /** TitleUpdate */
        TitleUpdate: {
            /**
             * Item Uri
             * Format: uri
             */
            item_uri: string;
            /** Old Title */
            old_title: string;
            /** New Title */
            new_title: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    add_qualified_attribute_prov_qualified_attribution_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QualifiedAttribute"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_qualified_attribute_prov_qualified_attribution_delete_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QualifiedAttribute"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_qualified_attribute_prov_qualified_attribution_update_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QualifiedAttributeUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_title_dcterms_title_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Title"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_title_dcterms_title_delete_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Title"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_title_dcterms_title_update_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TitleUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_description_dcterms_description_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Description"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_description_dcterms_description_delete_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Description"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_description_dcterms_description_update_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DescriptionUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_identifier_dcterms_identifier_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Identifier"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_identifier_dcterms_identifier_delete_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Identifier"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_identifier_dcterms_identifier_update_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IdentifierUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_modified_date_dcterms_modified_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DateTime"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_modified_date_dcterms_modified_delete_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DateTime"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_modified_date_dcterms_modified_update_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DateTimeUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_issued_date_dcterms_issued_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DateTime"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_issued_date_dcterms_issued_delete_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DateTime"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_issued_date_dcterms_issued_update_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DateTimeUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    link_rights_object_dcterms_rights_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Rights"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unlink_rights_object_dcterms_rights_delete_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Rights"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_rights_object_dcterms_rights_update_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RightsUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    link_publisher_object_dcterms_publisher_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Publisher"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unlink_publisher_object_dcterms_publisher_delete_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Publisher"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_publisher_object_dcterms_publisher_update_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PublisherUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_contact_point_dcat_contact_point_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContactPoint"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_contact_point_dcat_contact_point_delete_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContactPoint"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_contact_point_dcat_contact_point_update_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContactPointUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_media_type_dcat_media_type_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MediaType"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_media_type_dcat_media_type_delete_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MediaType"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_media_type_dcat_media_type_update_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MediaTypeUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    link_document_document_link_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DocumentLink"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unlink_document_document_link_delete_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DocumentLink"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_telicent_primary_name_telicent_primary_name_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TelicentPrimaryName"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_telicent_primary_name_telicent_primary_name_delete_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TelicentPrimaryName"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_rdfs_class_ontology_rdfs_class_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RDFClass"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_annotation_annotation_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LiteralTripleAndDataset"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_annotation_annotation_delete_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LiteralTripleAndDataset"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    link_node_object_property_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ObjectTripleAndDataset"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unlink_node_object_property_delete_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ObjectTripleAndDataset"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    handle_request_availability_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthcheckReport"];
                };
            };
        };
    };
    handle_request_readiness_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthcheckReport"];
                };
            };
        };
    };
}
