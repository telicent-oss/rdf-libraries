name: publish-nx.yml
on:
  workflow_call:
  workflow_dispatch:
  push:
permissions:
  actions: read
  contents: read
  id-token: write # needed for provenance data generation

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - run: git config --global user.email "${{ github.actor }}@users.noreply.github.com"
      - run: git config --global user.name "${{ github.actor }}"
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/cache@v4
        with:
          path: |
            node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('./yarn.lock') }}
          restore-keys: ${{ runner.os }}-yarn-
      - uses: actions/setup-node@v4
        with:
          node-version: 20.14
          registry-url: 'https://registry.npmjs.org/'
          scope: 'telicent-oss'
          token: ${{ secrets.NPM_REGISTRY_TOKEN }}
      - run: yarn --version
      - run: yarn config list
      - name: Validate NPM Token for Publishing
        run: |
          TMP_DIR=$(mktemp -d)
          cd "$TMP_DIR"

          NAME="@temp/dummy-publish-test-$(date +%s%N)"
          echo "{\"name\": \"$NAME\", \"version\": \"1.0.0\"}" > package.json

          # Attempt a dry-run publish; no package is actually published.
          if npm publish --dry-run > /dev/null 2>&1; then
            echo "Token is valid for publishing."
          else
            echo "Token does not have publishing permissions or is expired." >&2
            exit 1
          fi
      - name: Check read permissions for all packages
        run: |
          npx lerna exec -- sh -c 'PACKAGE=$(node -p "require(\"./package.json\").name"); echo "Checking read access for $PACKAGE"; npm view "$PACKAGE" version'
      - run: yarn install --frozen-lockfile
      - run: yarn publish:ci
        env:
          NPM_CONFIG_PROVENANCE: true
